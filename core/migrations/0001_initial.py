# Generated by Django 4.2.23 on 2025-06-29 17:59

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('role', models.CharField(choices=[('reb_officer', 'REB Officer'), ('school_admin', 'School Administrator'), ('teacher', 'Teacher'), ('community_member', 'Community Member'), ('system_admin', 'System Administrator')], default='teacher', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended'), ('pending', 'Pending Approval')], default='pending', max_length=20)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pictures/')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=15, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('last_login_ip', models.GenericIPAddressField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'core_user',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='District',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('district_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('district_name', models.CharField(max_length=100, unique=True)),
                ('district_code', models.CharField(max_length=10, unique=True)),
                ('province', models.CharField(max_length=100)),
                ('total_schools', models.PositiveIntegerField(default=0)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'District',
                'verbose_name_plural': 'Districts',
                'db_table': 'core_district',
                'ordering': ['district_name'],
            },
        ),
        migrations.CreateModel(
            name='School',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('school_name', models.CharField(max_length=200, unique=True)),
                ('school_code', models.CharField(help_text='Official REB school code', max_length=20, unique=True)),
                ('district', models.CharField(max_length=100)),
                ('sector', models.CharField(max_length=100)),
                ('cell', models.CharField(max_length=100)),
                ('village', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('lower_secondary', 'Lower Secondary (S1-S3)'), ('upper_secondary', 'Upper Secondary (S4-S6)'), ('both', 'Both Lower and Upper Secondary')], default='both', max_length=20)),
                ('total_students', models.PositiveIntegerField(default=0)),
                ('total_teachers', models.PositiveIntegerField(default=0)),
                ('total_staff', models.PositiveIntegerField(default=0)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('email_address', models.EmailField(blank=True, max_length=254, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('address', models.TextField()),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('suspended', 'Suspended')], default='active', max_length=20)),
                ('principal_name', models.CharField(blank=True, max_length=100, null=True)),
                ('principal_phone', models.CharField(blank=True, max_length=15, null=True)),
                ('principal_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('academic_performance_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Academic performance score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('infrastructure_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Infrastructure quality score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('need_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Need assessment score (0-100)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_schools', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'School',
                'verbose_name_plural': 'Schools',
                'db_table': 'core_school',
                'ordering': ['school_name'],
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('config_key', models.CharField(max_length=100, unique=True)),
                ('config_value', models.TextField()),
                ('config_type', models.CharField(default='string', max_length=20)),
                ('category', models.CharField(choices=[('ai_allocation', 'AI Allocation Engine'), ('grant_limits', 'Grant Limits and Rules'), ('reporting', 'Reporting Settings'), ('notifications', 'Notification Settings'), ('security', 'Security Settings'), ('general', 'General Settings')], default='general', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_system', models.BooleanField(default=False, help_text='System configurations cannot be modified by users')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_configs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configurations',
                'db_table': 'core_system_configuration',
                'ordering': ['category', 'config_key'],
            },
        ),
        migrations.CreateModel(
            name='SchoolUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('school_role', models.CharField(choices=[('principal', 'Principal'), ('deputy_principal', 'Deputy Principal'), ('head_teacher', 'Head Teacher'), ('teacher', 'Teacher'), ('admin_staff', 'Administrative Staff'), ('support_staff', 'Support Staff')], default='teacher', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('can_submit_proposals', models.BooleanField(default=False)),
                ('can_manage_budget', models.BooleanField(default=False)),
                ('can_view_reports', models.BooleanField(default=True)),
                ('can_manage_users', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('assigned_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_school_users', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_assignments', to='core.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='school_assignments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'School User Assignment',
                'verbose_name_plural': 'School User Assignments',
                'db_table': 'core_school_user',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'school')},
            },
        ),
    ]
