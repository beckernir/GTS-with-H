# Generated by Django 4.2.23 on 2025-06-29 17:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dashboard_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('dashboard_name', models.CharField(max_length=200)),
                ('dashboard_type', models.CharField(choices=[('reb_officer', 'REB Officer Dashboard'), ('school_admin', 'School Administrator Dashboard'), ('teacher', 'Teacher Dashboard'), ('community', 'Community Dashboard'), ('system_admin', 'System Administrator Dashboard'), ('custom', 'Custom Dashboard')], default='custom', max_length=20)),
                ('description', models.TextField(blank=True, null=True)),
                ('layout_config', models.JSONField(default=dict, help_text='JSON object containing dashboard layout configuration')),
                ('is_default', models.BooleanField(default=False)),
                ('is_public', models.BooleanField(default=False)),
                ('refresh_interval', models.PositiveIntegerField(default=300, help_text='Refresh interval in seconds')),
                ('is_active', models.BooleanField(default=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dashboards', to='core.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='dashboards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dashboard',
                'verbose_name_plural': 'Dashboards',
                'db_table': 'reporting_dashboard',
                'ordering': ['-is_default', '-created_at'],
                'unique_together': {('user', 'dashboard_name')},
            },
        ),
        migrations.CreateModel(
            name='KPI',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('kpi_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('kpi_name', models.CharField(max_length=200, unique=True)),
                ('kpi_category', models.CharField(choices=[('financial', 'Financial KPIs'), ('operational', 'Operational KPIs'), ('academic', 'Academic KPIs'), ('compliance', 'Compliance KPIs'), ('user_engagement', 'User Engagement KPIs'), ('system_performance', 'System Performance KPIs'), ('other', 'Other KPIs')], default='other', max_length=20)),
                ('kpi_type', models.CharField(choices=[('count', 'Count'), ('percentage', 'Percentage'), ('currency', 'Currency'), ('ratio', 'Ratio'), ('score', 'Score'), ('duration', 'Duration'), ('other', 'Other')], default='count', max_length=20)),
                ('description', models.TextField()),
                ('calculation_formula', models.TextField(help_text='Formula or method for calculating the KPI')),
                ('unit_of_measure', models.CharField(blank=True, max_length=50, null=True)),
                ('target_value', models.DecimalField(decimal_places=4, default=0.0, max_digits=15)),
                ('threshold_value', models.DecimalField(decimal_places=4, default=0.0, max_digits=15)),
                ('min_value', models.DecimalField(decimal_places=4, default=0.0, max_digits=15)),
                ('max_value', models.DecimalField(decimal_places=4, default=100.0, max_digits=15)),
                ('is_active', models.BooleanField(default=True)),
                ('is_system', models.BooleanField(default=False, help_text='System KPIs cannot be modified by users')),
                ('auto_calculate', models.BooleanField(default=True)),
                ('applicable_roles', models.JSONField(default=list, help_text='JSON array of user roles this KPI applies to')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_kpis', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'KPI',
                'verbose_name_plural': 'KPIs',
                'db_table': 'reporting_kpi',
                'ordering': ['kpi_category', 'kpi_name'],
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('report_name', models.CharField(max_length=200)),
                ('report_type', models.CharField(choices=[('grant_summary', 'Grant Summary Report'), ('budget_analysis', 'Budget Analysis Report'), ('school_performance', 'School Performance Report'), ('compliance_report', 'Compliance Report'), ('training_report', 'Training Report'), ('user_activity', 'User Activity Report'), ('financial_report', 'Financial Report'), ('custom', 'Custom Report')], default='custom', max_length=20)),
                ('format', models.CharField(choices=[('pdf', 'PDF'), ('excel', 'Excel'), ('csv', 'CSV'), ('json', 'JSON'), ('html', 'HTML'), ('other', 'Other')], default='pdf', max_length=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('parameters', models.JSONField(default=dict, help_text='JSON object containing report parameters')),
                ('is_scheduled', models.BooleanField(default=False)),
                ('schedule_frequency', models.CharField(blank=True, choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('custom', 'Custom')], max_length=20, null=True)),
                ('next_run_date', models.DateTimeField(blank=True, null=True)),
                ('report_file', models.FileField(blank=True, null=True, upload_to='reports/')),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('generating', 'Generating'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('generation_time_seconds', models.PositiveIntegerField(default=0)),
                ('row_count', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('generated_at', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_reports', to=settings.AUTH_USER_MODEL)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='core.school')),
            ],
            options={
                'verbose_name': 'Report',
                'verbose_name_plural': 'Reports',
                'db_table': 'reporting_report',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schedule_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('schedule_name', models.CharField(max_length=200)),
                ('frequency', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('quarterly', 'Quarterly'), ('yearly', 'Yearly'), ('custom', 'Custom')], default='monthly', max_length=20)),
                ('frequency_config', models.JSONField(default=dict, help_text='JSON object containing frequency configuration')),
                ('start_date', models.DateField()),
                ('end_date', models.DateField(blank=True, null=True)),
                ('next_run', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('send_email', models.BooleanField(default=False)),
                ('email_recipients', models.JSONField(default=list, help_text='JSON array of email addresses')),
                ('last_run', models.DateTimeField(blank=True, null=True)),
                ('total_runs', models.PositiveIntegerField(default=0)),
                ('successful_runs', models.PositiveIntegerField(default=0)),
                ('failed_runs', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_schedules', to=settings.AUTH_USER_MODEL)),
                ('report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schedules', to='reporting.report')),
            ],
            options={
                'verbose_name': 'Report Schedule',
                'verbose_name_plural': 'Report Schedules',
                'db_table': 'reporting_report_schedule',
                'ordering': ['-next_run'],
            },
        ),
        migrations.CreateModel(
            name='DataExport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('export_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('export_type', models.CharField(choices=[('grants', 'Grants Data'), ('budgets', 'Budget Data'), ('reports', 'Reports Data'), ('users', 'Users Data'), ('schools', 'Schools Data'), ('training', 'Training Data'), ('analytics', 'Analytics Data'), ('custom', 'Custom Export')], default='custom', max_length=20)),
                ('format', models.CharField(choices=[('csv', 'CSV'), ('excel', 'Excel'), ('json', 'JSON'), ('xml', 'XML'), ('pdf', 'PDF'), ('other', 'Other')], default='csv', max_length=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('filters', models.JSONField(default=dict, help_text='JSON object containing export filters')),
                ('export_file', models.FileField(blank=True, null=True, upload_to='exports/')),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('row_count', models.PositiveIntegerField(default=0)),
                ('processing_time_seconds', models.PositiveIntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('last_downloaded', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_exports', to='core.school')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_exports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Data Export',
                'verbose_name_plural': 'Data Exports',
                'db_table': 'reporting_data_export',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('widget_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('widget_name', models.CharField(max_length=200)),
                ('widget_type', models.CharField(choices=[('chart', 'Chart/Graph'), ('table', 'Data Table'), ('metric', 'KPI Metric'), ('list', 'List View'), ('calendar', 'Calendar'), ('map', 'Map View'), ('gauge', 'Gauge Chart'), ('progress', 'Progress Bar'), ('summary', 'Summary Card'), ('custom', 'Custom Widget')], default='metric', max_length=20)),
                ('chart_type', models.CharField(blank=True, choices=[('line', 'Line Chart'), ('bar', 'Bar Chart'), ('pie', 'Pie Chart'), ('doughnut', 'Doughnut Chart'), ('area', 'Area Chart'), ('scatter', 'Scatter Plot'), ('heatmap', 'Heatmap'), ('treemap', 'Treemap'), ('other', 'Other')], max_length=20, null=True)),
                ('data_source', models.CharField(help_text='Data source identifier', max_length=100)),
                ('configuration', models.JSONField(default=dict, help_text='JSON object containing widget configuration')),
                ('position_x', models.PositiveIntegerField(default=0)),
                ('position_y', models.PositiveIntegerField(default=0)),
                ('width', models.PositiveIntegerField(default=1)),
                ('height', models.PositiveIntegerField(default=1)),
                ('is_visible', models.BooleanField(default=True)),
                ('auto_refresh', models.BooleanField(default=True)),
                ('refresh_interval', models.PositiveIntegerField(default=300, help_text='Refresh interval in seconds')),
                ('last_data_update', models.DateTimeField(blank=True, null=True)),
                ('cached_data', models.JSONField(default=dict, help_text='JSON object containing cached widget data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dashboard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='widgets', to='reporting.dashboard')),
            ],
            options={
                'verbose_name': 'Dashboard Widget',
                'verbose_name_plural': 'Dashboard Widgets',
                'db_table': 'reporting_dashboard_widget',
                'ordering': ['dashboard', 'position_y', 'position_x'],
            },
        ),
        migrations.CreateModel(
            name='AnalyticsEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('event_type', models.CharField(choices=[('page_view', 'Page View'), ('button_click', 'Button Click'), ('form_submit', 'Form Submit'), ('file_download', 'File Download'), ('report_generate', 'Report Generation'), ('data_export', 'Data Export'), ('search', 'Search'), ('login', 'Login'), ('logout', 'Logout'), ('other', 'Other')], default='other', max_length=20)),
                ('event_name', models.CharField(max_length=200)),
                ('session_id', models.CharField(blank=True, max_length=100, null=True)),
                ('page_url', models.URLField(blank=True, null=True)),
                ('referrer_url', models.URLField(blank=True, null=True)),
                ('user_agent', models.TextField(blank=True, null=True)),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True)),
                ('event_data', models.JSONField(default=dict, help_text='JSON object containing event-specific data')),
                ('metadata', models.JSONField(default=dict, help_text='JSON object containing additional metadata')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('duration_seconds', models.PositiveIntegerField(default=0, help_text='Event duration in seconds')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='analytics_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Analytics Event',
                'verbose_name_plural': 'Analytics Events',
                'db_table': 'reporting_analytics_event',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='KPIValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('value', models.DecimalField(decimal_places=4, max_digits=15)),
                ('measurement_date', models.DateField()),
                ('measurement_period', models.CharField(help_text="e.g., '2024 Q1', 'Monthly', 'Weekly'", max_length=50)),
                ('context_data', models.JSONField(default=dict, help_text='JSON object containing additional context data')),
                ('is_above_target', models.BooleanField(default=False)),
                ('is_above_threshold', models.BooleanField(default=False)),
                ('performance_status', models.CharField(choices=[('excellent', 'Excellent'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor'), ('critical', 'Critical')], default='fair', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('calculated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='calculated_kpi_values', to=settings.AUTH_USER_MODEL)),
                ('kpi', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='values', to='reporting.kpi')),
                ('school', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='kpi_values', to='core.school')),
            ],
            options={
                'verbose_name': 'KPI Value',
                'verbose_name_plural': 'KPI Values',
                'db_table': 'reporting_kpi_value',
                'ordering': ['kpi', '-measurement_date'],
                'unique_together': {('kpi', 'school', 'measurement_date')},
            },
        ),
    ]
