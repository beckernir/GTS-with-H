# Generated by Django 4.2.23 on 2025-06-29 17:59

from django.db import migrations, models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AIPerformanceMetrics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metric_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('metric_type', models.CharField(choices=[('allocation_accuracy', 'Allocation Accuracy'), ('prediction_accuracy', 'Prediction Accuracy'), ('risk_detection', 'Risk Detection'), ('optimization_effectiveness', 'Optimization Effectiveness'), ('system_performance', 'System Performance'), ('user_satisfaction', 'User Satisfaction')], default='allocation_accuracy', max_length=30)),
                ('metric_name', models.CharField(max_length=100)),
                ('metric_value', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('target_value', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('threshold_value', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('measurement_date', models.DateField()),
                ('measurement_period', models.CharField(help_text="e.g., '2024 Q1', 'Monthly', 'Weekly'", max_length=50)),
                ('is_above_target', models.BooleanField(default=False)),
                ('is_above_threshold', models.BooleanField(default=False)),
                ('trend_direction', models.CharField(choices=[('up', 'Up'), ('down', 'Down'), ('stable', 'Stable')], default='stable', max_length=10)),
                ('metadata', models.JSONField(default=dict, help_text='JSON object containing additional metric data')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'AI Performance Metric',
                'verbose_name_plural': 'AI Performance Metrics',
                'db_table': 'ai_engine_ai_performance_metrics',
                'ordering': ['-measurement_date', 'metric_type'],
            },
        ),
        migrations.CreateModel(
            name='AllocationAlgorithm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('algorithm_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('algorithm_name', models.CharField(max_length=100, unique=True)),
                ('algorithm_type', models.CharField(choices=[('weighted_scoring', 'Weighted Scoring'), ('machine_learning', 'Machine Learning'), ('optimization', 'Optimization Algorithm'), ('rule_based', 'Rule-Based System'), ('hybrid', 'Hybrid Approach')], default='weighted_scoring', max_length=20)),
                ('description', models.TextField()),
                ('configuration', models.JSONField(default=dict, help_text='JSON object containing algorithm parameters')),
                ('version', models.CharField(default='1.0.0', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_default', models.BooleanField(default=False)),
                ('accuracy_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Algorithm accuracy (0-100)', max_digits=5)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Allocation Algorithm',
                'verbose_name_plural': 'Allocation Algorithms',
                'db_table': 'ai_engine_allocation_algorithm',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AllocationFactor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('factor_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('factor_name', models.CharField(max_length=100, unique=True)),
                ('factor_category', models.CharField(choices=[('school_performance', 'School Performance'), ('need_assessment', 'Need Assessment'), ('geographic', 'Geographic Factors'), ('demographic', 'Demographic Factors'), ('historical', 'Historical Data'), ('compliance', 'Compliance Factors'), ('impact_potential', 'Impact Potential'), ('other', 'Other Factors')], default='other', max_length=20)),
                ('factor_type', models.CharField(choices=[('numeric', 'Numeric Score'), ('percentage', 'Percentage'), ('boolean', 'Boolean (Yes/No)'), ('categorical', 'Categorical'), ('weighted', 'Weighted Score')], default='numeric', max_length=20)),
                ('description', models.TextField()),
                ('weight', models.DecimalField(decimal_places=2, default=1.0, help_text='Factor weight in allocation (0.00-1.00)', max_digits=5)),
                ('min_value', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('max_value', models.DecimalField(decimal_places=2, default=100.0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('is_required', models.BooleanField(default=False)),
                ('auto_calculate', models.BooleanField(default=True, help_text='Whether factor is calculated automatically')),
                ('calculation_formula', models.TextField(blank=True, help_text='Formula or method for calculating this factor', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Allocation Factor',
                'verbose_name_plural': 'Allocation Factors',
                'db_table': 'ai_engine_allocation_factor',
                'ordering': ['factor_category', 'factor_name'],
            },
        ),
        migrations.CreateModel(
            name='AllocationRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('run_name', models.CharField(max_length=200)),
                ('total_proposals', models.PositiveIntegerField(default=0)),
                ('total_budget_available', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('total_allocated', models.DecimalField(decimal_places=2, default=0.0, max_digits=15)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.PositiveIntegerField(default=0)),
                ('configuration', models.JSONField(default=dict, help_text='JSON object containing run parameters')),
                ('results_summary', models.JSONField(default=dict, help_text='JSON object containing run results summary')),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_details', models.JSONField(default=dict, help_text='JSON object containing error details')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Allocation Run',
                'verbose_name_plural': 'Allocation Runs',
                'db_table': 'ai_engine_allocation_run',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='OptimizationRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('recommendation_type', models.CharField(choices=[('budget_optimization', 'Budget Optimization'), ('process_improvement', 'Process Improvement'), ('resource_allocation', 'Resource Allocation'), ('risk_mitigation', 'Risk Mitigation'), ('performance_enhancement', 'Performance Enhancement'), ('compliance_improvement', 'Compliance Improvement'), ('other', 'Other')], default='other', max_length=30)),
                ('priority', models.CharField(choices=[('low', 'Low Priority'), ('medium', 'Medium Priority'), ('high', 'High Priority'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('rationale', models.TextField(help_text='AI reasoning behind the recommendation')),
                ('expected_impact', models.TextField()),
                ('impact_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Expected impact score (0-100)', max_digits=5)),
                ('implementation_steps', models.JSONField(default=list, help_text='JSON array containing implementation steps')),
                ('estimated_cost', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('estimated_duration_days', models.PositiveIntegerField(default=0)),
                ('is_implemented', models.BooleanField(default=False)),
                ('implementation_date', models.DateTimeField(blank=True, null=True)),
                ('implementation_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Optimization Recommendation',
                'verbose_name_plural': 'Optimization Recommendations',
                'db_table': 'ai_engine_optimization_recommendation',
                'ordering': ['-priority', '-impact_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProposalAllocationScore',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('total_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Overall allocation score (0-100)', max_digits=5)),
                ('rank', models.PositiveIntegerField(default=0, help_text='Ranking position in allocation run')),
                ('factor_scores', models.JSONField(default=dict, help_text='JSON object containing individual factor scores')),
                ('recommended_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('allocation_percentage', models.DecimalField(decimal_places=2, default=0.0, help_text='Percentage of requested amount recommended', max_digits=5)),
                ('is_allocated', models.BooleanField(default=False)),
                ('allocated_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('allocation_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Proposal Allocation Score',
                'verbose_name_plural': 'Proposal Allocation Scores',
                'db_table': 'ai_engine_proposal_allocation_score',
                'ordering': ['allocation_run', '-total_score'],
            },
        ),
        migrations.CreateModel(
            name='RiskAssessment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('risk_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('risk_name', models.CharField(max_length=200)),
                ('risk_category', models.CharField(choices=[('financial', 'Financial Risk'), ('compliance', 'Compliance Risk'), ('operational', 'Operational Risk'), ('reputational', 'Reputational Risk'), ('strategic', 'Strategic Risk'), ('other', 'Other Risk')], default='other', max_length=20)),
                ('risk_level', models.CharField(choices=[('low', 'Low Risk'), ('medium', 'Medium Risk'), ('high', 'High Risk'), ('critical', 'Critical Risk')], default='low', max_length=20)),
                ('description', models.TextField()),
                ('risk_factors', models.JSONField(default=dict, help_text='JSON object containing risk factors and scores')),
                ('risk_score', models.DecimalField(decimal_places=2, default=0.0, help_text='Overall risk score (0-100)', max_digits=5)),
                ('mitigation_strategies', models.TextField(blank=True, null=True)),
                ('monitoring_requirements', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_resolved', models.BooleanField(default=False)),
                ('resolution_date', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Risk Assessment',
                'verbose_name_plural': 'Risk Assessments',
                'db_table': 'ai_engine_risk_assessment',
                'ordering': ['-risk_score', '-created_at'],
            },
        ),
    ]
